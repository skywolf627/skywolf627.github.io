<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skywolf627.github.io</id>
    <title>Gridea</title>
    <updated>2021-07-19T00:48:51.242Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skywolf627.github.io"/>
    <link rel="self" href="https://skywolf627.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://skywolf627.github.io/images/avatar.png</logo>
    <icon>https://skywolf627.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Electron自动更新]]></title>
        <id>https://skywolf627.github.io/post/electron-zi-dong-geng-xin/</id>
        <link href="https://skywolf627.github.io/post/electron-zi-dong-geng-xin/">
        </link>
        <updated>2021-07-19T00:18:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装依赖">安装依赖</h2>
<pre><code>yarn add electron-updater
</code></pre>
<h2 id="配置版本">配置版本</h2>
<pre><code>在package.json中设置当前版本  {&quot;version&quot;: &quot;0.1.1&quot;}
</code></pre>
<h2 id="配置electron打包">配置Electron打包</h2>
<pre><code> pluginOptions: {
        electronBuilder: {
            nodeIntegration: true,
            builderOptions: {
                win: {
                    icon: './public/app.ico'
                },
                mac: {
                    icon: './public/app.png'
                },
                productName: `appName`,
                publish: [{
                    provider: &quot;generic&quot;,
                    url: &quot;http://xxxx.com/&quot;
                }],
                nsis: {
                    oneClick: false,
                    // 允许修改安装目录
                    allowToChangeInstallationDirectory: true,
                    allowElevation: true,
                    createDesktopShortcut: true,
                    createStartMenuShortcut: true,
                    shortcutName: `appName`
                }
            }
        }
    }
</code></pre>
<h2 id="在根目录添加updatejs文件如下">在根目录添加update.js文件，如下：</h2>
<pre><code>import { autoUpdater } from 'electron-updater'
import { ipcMain } from 'electron'
let mainWindow = null;
export function updateHandle(window, feedUrl) {
    mainWindow = window;
    let message = {
        error: '检查更新出错',
        checking: '正在检查更新……',
        updateAva: '检测到新版本，正在下载……',
        updateNotAva: '现在使用的就是最新版本，不用更新',
    };
    //设置更新包的地址
    autoUpdater.setFeedURL(feedUrl);
    //监听升级失败事件
    autoUpdater.on('error', function(error) {
        sendUpdateMessage({
            cmd: 'error',
            message: error
        })
    });
    //监听开始检测更新事件
    autoUpdater.on('checking-for-update', function(message) {
        sendUpdateMessage({
            cmd: 'checking-for-update',
            message: message
        })
    });
    //监听发现可用更新事件
    autoUpdater.on('update-available', function(message) {
        sendUpdateMessage({
            cmd: 'update-available',
            message: message
        })
    });
    //监听没有可用更新事件
    autoUpdater.on('update-not-available', function(message) {
        sendUpdateMessage({
            cmd: 'update-not-available',
            message: message
        })
    });

    // 更新下载进度事件
    autoUpdater.on('download-progress', function(progressObj) {

        sendUpdateMessage({
            cmd: 'download-progress',
            message: progressObj
        })
    });
    //监听下载完成事件
    autoUpdater.on('update-downloaded', function(event, releaseNotes, releaseName, releaseDate, updateUrl) {
        sendUpdateMessage({
                cmd: 'update-downloaded',
                message: {
                    releaseNotes,
                    releaseName,
                    releaseDate,
                    updateUrl
                }
            })
            //退出并安装更新包
            // autoUpdater.quitAndInstall();
    });

    //接收渲染进程消息，开始检查更新
    ipcMain.on(&quot;checkForUpdate&quot;, (e, arg) =&gt; {
        //执行自动更新检查
        // sendUpdateMessage({cmd:'checkForUpdate',message:arg})
        autoUpdater.checkForUpdates();
    })
}
//给渲染进程发送消息
function sendUpdateMessage(text) {
    mainWindow.webContents.send('message', text)

}
</code></pre>
<h2 id="backgroundjs添加相关代码">background.js添加相关代码</h2>
<pre><code>import { updateHandle } from './update'
const ipc = require('electron').ipcMain
</code></pre>
<pre><code>const win = new BrowserWindow() //当前窗体实例
//检测版本更新
//公网地址  和上面Electron打包配置中的地址保持一致
let feedUrl = &quot;http://xxxxx.com/&quot;;      
updateHandle(win, feedUrl);
</code></pre>
<h2 id="修改appvue页面此处用的是ant-design组件">修改App.vue页面，此处用的是ant-design组件</h2>
<pre><code>&lt;template&gt;
  &lt;router-view /&gt;
  &lt;a-modal title=&quot;正在更新新版本,请稍候...&quot;
           :visible=&quot;dialogVisible&quot;
           width=&quot;60%&quot;
           :maskClosable=&quot;false&quot;
           :closable=&quot;false&quot;
           centered
           :footer=&quot;null&quot;&gt;
    &lt;div style=&quot;width:100%;height:20vh;line-height:20vh;text-align:center&quot;&gt;
      &lt;a-progress :status=&quot;percentage==100?'success':'active'&quot;
                  :showInfo=&quot;true&quot;
                  :stroke-width=&quot;20&quot;
                  :percent=&quot;percentage&quot;
                  :width=&quot;strokeWidth&quot;&gt;&lt;/a-progress&gt;
    &lt;/div&gt;
  &lt;/a-modal&gt;

&lt;/template&gt;
&lt;script&gt;

let ipcRenderer = require(&quot;electron&quot;).ipcRenderer;
let _this = this;
//接收主进程版本更新消息
ipcRenderer.on(&quot;message&quot;, (event, arg) =&gt; {
  console.log(arg);
  if (&quot;update-not-available&quot; == arg.cmd) {
    //不需要升级
    this.$router.push('/')
  }
  else if (&quot;update-available&quot; == arg.cmd) {
    //显示升级对话框
    _this.dialogVisible = true;
  } else if (&quot;download-progress&quot; == arg.cmd) {
    //更新升级进度
    /**
     * 
     * message{bytesPerSecond: 47673
      delta: 48960
      percent: 0.11438799862426002
      total: 42801693
      transferred: 48960
      }
     */
    console.log(arg.message.percent);
    let percent = Math.round(parseFloat(arg.message.percent));
    _this.percentage = percent;
  } else if (&quot;error&quot; == arg.cmd) {
    _this.dialogVisible = false;
    _this.$message.error(&quot;更新失败&quot;);
  }
});
//2秒后开始检测新版本
let timeOut = window.setTimeout(() =&gt; {
  ipcRenderer.send(&quot;checkForUpdate&quot;);
}, 2000);
clearTimeout;
//间隔1小时检测一次
let interval = window.setInterval(() =&gt; {
  ipcRenderer.send(&quot;checkForUpdate&quot;);
}, 3600000);
export default {
  data () {
    return {
      dialogVisible: false,
      closeOnClickModal: false,
      closeOnPressEscape: false,
      showClose: false,
      percentage: 0,
      strokeWidth: 200
    }
  },
  created () {  },
  mounted () {
    _this = this;
  },
  destroyed () {
    window.clearInterval(interval);
    window.clearInterval(timeOut);
  }
}
&lt;/script&gt;

</code></pre>
<h2 id="发布">发布</h2>
<pre><code>//打包
npm run electron:build

将生成的
latest.yml
App Setup 0.1.2.exe
App Setup 0.1.2.exe.blockmap
3个文件都拷贝到服务器上，地址就是上面填写的更新地址

PS:服务器需要配置MIME映射，否者无法访问.yml文件

PS:第一个版本打包是没有latest.yml文件的，修改版本号再打包一次就可以了
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VUE3常用插件]]></title>
        <id>https://skywolf627.github.io/post/vue3-chang-yong-cha-jian/</id>
        <link href="https://skywolf627.github.io/post/vue3-chang-yong-cha-jian/">
        </link>
        <updated>2021-07-16T07:59:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="进度条">进度条</h2>
<pre><code>yarn add nprogress
</code></pre>
<h2 id="grid布局-可拖拽-改变大小">grid布局 可拖拽 改变大小</h2>
<pre><code>yarn add vue-grid-layout@next
</code></pre>
<h2 id="event-bus">event-bus</h2>
<pre><code>yarn add vue3-eventbus
</code></pre>
<h2 id="滚动条">滚动条</h2>
<pre><code>yarn add vue3-perfect-scrollbar
</code></pre>
]]></content>
    </entry>
</feed>